package org.BSC.CassandraBM.MetricsAnalyzer;

import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import me.prettyprint.cassandra.serializers.CompositeSerializer;
import me.prettyprint.cassandra.serializers.DynamicCompositeSerializer;
import me.prettyprint.cassandra.serializers.LongSerializer;
import me.prettyprint.hector.api.Cluster;
import me.prettyprint.hector.api.Keyspace;
import me.prettyprint.hector.api.beans.AbstractComposite;
import me.prettyprint.hector.api.beans.ColumnSlice;
import me.prettyprint.hector.api.beans.Composite;
import me.prettyprint.hector.api.beans.DynamicComposite;
import me.prettyprint.hector.api.beans.HColumn;
import me.prettyprint.hector.api.factory.HFactory;
import org.apache.commons.csv.CSVPrinter;

/**
 * Hello world!
 *
 */
public class Analyzer {
    
    private static final Logger log = Logger.getLogger(Analyzer.class.getName());
    
    public static void main(String[] args) {
        String test;
        String node;
        switch (args.length) {
            case 2:
                node = args[0];
                test = args[1];
                break;
            case 1:
                String[] tmp = args[0].split(":");
                node = tmp[0];
                test = tmp[1];
                break;
            default:
                throw new IllegalArgumentException("Wrong number of arguments");
            
        }
        log.log(Level.INFO, "Testing {0} {1}", new Object[]{node, test});
        
        Cluster cluster = HFactory.getOrCreateCluster("CBMetrics", System.getProperty("clusterlocation","127.0.0.1:9160"));                
        
        Keyspace ksp = HFactory.createKeyspace("metricspace", cluster);
         DynamicComposite from = new DynamicComposite();
        
        from.addComponent(0, 0L, AbstractComposite.ComponentEquality.EQUAL);
        DynamicComposite to = new DynamicComposite();
        to.addComponent(0, Long.MAX_VALUE, AbstractComposite.ComponentEquality.GREATER_THAN_EQUAL);
        boolean th=true;
        Date ldate=null;
        ArrayList<String> cols=new ArrayList();
        cols.add("time");
        cols.add("test");
        ArrayList<String> vals=new ArrayList();
     //     SimpleDateFormat sd = new SimpleDateFormat("MMM d, yyyy hh:mm:ss aaa");
            CSVPrinter cp = new CSVPrinter(System.out);
        while (true) {
            ColumnSlice<DynamicComposite, DynamicComposite> get =
                    HFactory.createSliceQuery(ksp, CompositeSerializer.get(), DynamicCompositeSerializer.get(),
                    DynamicCompositeSerializer.get()).setColumnFamily("metrics").setKey(new Composite(node, test))
                    .setRange(from, to, false, 200).execute().get();
            if (get.getColumns().isEmpty()) {
                break;
            }
            
            
            
            DynamicComposite name = null;
            for (HColumn<DynamicComposite, DynamicComposite> res : get.getColumns()) {
                name = res.getName();
                Date d = new Date(name.get(0, LongSerializer.get()));
                if(ldate==null){
                    ldate=d;
                    vals.add(d.toGMTString());
                    vals.add(test+":"+node);
                }else if(!ldate.toGMTString().equals(d.toGMTString())){
                    ldate=d;
                    if(th){
                       cp.println(cols.toArray(new String[cols.size()]));
                       th=false;
                       cols=null;
                    }
                    
                    cp.println(vals.toArray(new String[vals.size()]));
                   vals=new ArrayList();
                   vals.add(d.toGMTString());
                   vals.add(test+":"+node);
                }
                    
                StringBuilder trow = new StringBuilder();
                for (int i = 1; i < name.size(); i++) {
                    trow.append(name.get(i).toString()).append("-");
                }
                String colname = trow.subSequence(0, trow.length() - 1).toString();
                String val = res.getValue().get(0).toString();
                if(th) {
                    cols.add(colname);
                }
                vals.add(val);
                
                
            }
            from = name;
            from.setEquality(AbstractComposite.ComponentEquality.GREATER_THAN_EQUAL);
        }
      
    
        
    }
}
