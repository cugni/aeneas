//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.01.14 at 12:06:13 PM CET 
//


package es.bsc.aeneas.model.gen;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for standardType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="standardType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="AsciiType"/>
 *     &lt;enumeration value="BytesType"/>
 *     &lt;enumeration value="Int32Type"/>
 *     &lt;enumeration value="BigIntegerType"/>
 *     &lt;enumeration value="LexicalUUIDType"/>
 *     &lt;enumeration value="LocalByPartionerType"/>
 *     &lt;enumeration value="LongType"/>
 *     &lt;enumeration value="TimeUUIDType"/>
 *     &lt;enumeration value="UTF8Type"/>
 *     &lt;enumeration value="AnyType"/>
 *     &lt;enumeration value="DynamicCompositeType"/>
 *     &lt;enumeration value="UUIDType"/>
 *     &lt;enumeration value="CounterColumnType"/>
 *     &lt;enumeration value="DoubleType"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "standardType", namespace = "http://aeneas.bsc.es/CommonTypes")
@XmlEnum
public enum StandardType {

    @XmlEnumValue("AsciiType")
    ASCII_TYPE("AsciiType"),
    @XmlEnumValue("BytesType")
    BYTES_TYPE("BytesType"),
    @XmlEnumValue("Int32Type")
    INT_32_TYPE("Int32Type"),
    @XmlEnumValue("BigIntegerType")
    BIG_INTEGER_TYPE("BigIntegerType"),
    @XmlEnumValue("LexicalUUIDType")
    LEXICAL_UUID_TYPE("LexicalUUIDType"),
    @XmlEnumValue("LocalByPartionerType")
    LOCAL_BY_PARTIONER_TYPE("LocalByPartionerType"),
    @XmlEnumValue("LongType")
    LONG_TYPE("LongType"),
    @XmlEnumValue("TimeUUIDType")
    TIME_UUID_TYPE("TimeUUIDType"),
    @XmlEnumValue("UTF8Type")
    UTF_8_TYPE("UTF8Type"),
    @XmlEnumValue("AnyType")
    ANY_TYPE("AnyType"),
    @XmlEnumValue("DynamicCompositeType")
    DYNAMIC_COMPOSITE_TYPE("DynamicCompositeType"),
    @XmlEnumValue("UUIDType")
    UUID_TYPE("UUIDType"),
    @XmlEnumValue("CounterColumnType")
    COUNTER_COLUMN_TYPE("CounterColumnType"),
    @XmlEnumValue("DoubleType")
    DOUBLE_TYPE("DoubleType");
    private final String value;

    StandardType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static StandardType fromValue(String v) {
        for (StandardType c: StandardType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
