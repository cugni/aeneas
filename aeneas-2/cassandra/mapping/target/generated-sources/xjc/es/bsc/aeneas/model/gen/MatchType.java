//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.01.14 at 12:06:13 PM CET 
//


package es.bsc.aeneas.model.gen;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for MatchType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MatchType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="fixedDests" minOccurs="0">
 *           &lt;complexType>
 *             &lt;complexContent>
 *               &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                 &lt;sequence>
 *                   &lt;element name="fixedDest" type="{http://aeneas.bsc.es/MatchingModel}FixedDest" maxOccurs="unbounded"/>
 *                 &lt;/sequence>
 *               &lt;/restriction>
 *             &lt;/complexContent>
 *           &lt;/complexType>
 *         &lt;/element>
 *         &lt;element name="refPath" type="{http://aeneas.bsc.es/MatchingModel}refPathType"/>
 *       &lt;/sequence>
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}anySimpleType" default="" />
 *       &lt;attribute name="crudType" use="required" type="{http://aeneas.bsc.es/MatchingModel}CrudType" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MatchType", propOrder = {
    "fixedDests",
    "refPath"
})
@XmlSeeAlso({
    CassandraMatchType.class
})
public class MatchType
    implements Equals, HashCode, ToString
{

    protected MatchType.FixedDests fixedDests;
    @XmlElement(required = true)
    protected RefPathType refPath;
    @XmlAttribute(name = "name")
    @XmlSchemaType(name = "anySimpleType")
    protected String name;
    @XmlAttribute(name = "crudType", required = true)
    protected CrudType crudType;

    /**
     * Gets the value of the fixedDests property.
     * 
     * @return
     *     possible object is
     *     {@link MatchType.FixedDests }
     *     
     */
    public MatchType.FixedDests getFixedDests() {
        return fixedDests;
    }

    /**
     * Sets the value of the fixedDests property.
     * 
     * @param value
     *     allowed object is
     *     {@link MatchType.FixedDests }
     *     
     */
    public void setFixedDests(MatchType.FixedDests value) {
        this.fixedDests = value;
    }

    /**
     * Gets the value of the refPath property.
     * 
     * @return
     *     possible object is
     *     {@link RefPathType }
     *     
     */
    public RefPathType getRefPath() {
        return refPath;
    }

    /**
     * Sets the value of the refPath property.
     * 
     * @param value
     *     allowed object is
     *     {@link RefPathType }
     *     
     */
    public void setRefPath(RefPathType value) {
        this.refPath = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        if (name == null) {
            return "";
        } else {
            return name;
        }
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the crudType property.
     * 
     * @return
     *     possible object is
     *     {@link CrudType }
     *     
     */
    public CrudType getCrudType() {
        return crudType;
    }

    /**
     * Sets the value of the crudType property.
     * 
     * @param value
     *     allowed object is
     *     {@link CrudType }
     *     
     */
    public void setCrudType(CrudType value) {
        this.crudType = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            MatchType.FixedDests theFixedDests;
            theFixedDests = this.getFixedDests();
            strategy.appendField(locator, this, "fixedDests", buffer, theFixedDests);
        }
        {
            RefPathType theRefPath;
            theRefPath = this.getRefPath();
            strategy.appendField(locator, this, "refPath", buffer, theRefPath);
        }
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            CrudType theCrudType;
            theCrudType = this.getCrudType();
            strategy.appendField(locator, this, "crudType", buffer, theCrudType);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof MatchType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final MatchType that = ((MatchType) object);
        {
            MatchType.FixedDests lhsFixedDests;
            lhsFixedDests = this.getFixedDests();
            MatchType.FixedDests rhsFixedDests;
            rhsFixedDests = that.getFixedDests();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fixedDests", lhsFixedDests), LocatorUtils.property(thatLocator, "fixedDests", rhsFixedDests), lhsFixedDests, rhsFixedDests)) {
                return false;
            }
        }
        {
            RefPathType lhsRefPath;
            lhsRefPath = this.getRefPath();
            RefPathType rhsRefPath;
            rhsRefPath = that.getRefPath();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "refPath", lhsRefPath), LocatorUtils.property(thatLocator, "refPath", rhsRefPath), lhsRefPath, rhsRefPath)) {
                return false;
            }
        }
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            CrudType lhsCrudType;
            lhsCrudType = this.getCrudType();
            CrudType rhsCrudType;
            rhsCrudType = that.getCrudType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "crudType", lhsCrudType), LocatorUtils.property(thatLocator, "crudType", rhsCrudType), lhsCrudType, rhsCrudType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            MatchType.FixedDests theFixedDests;
            theFixedDests = this.getFixedDests();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fixedDests", theFixedDests), currentHashCode, theFixedDests);
        }
        {
            RefPathType theRefPath;
            theRefPath = this.getRefPath();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "refPath", theRefPath), currentHashCode, theRefPath);
        }
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            CrudType theCrudType;
            theCrudType = this.getCrudType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "crudType", theCrudType), currentHashCode, theCrudType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence>
     *         &lt;element name="fixedDest" type="{http://aeneas.bsc.es/MatchingModel}FixedDest" maxOccurs="unbounded"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "fixedDest"
    })
    public static class FixedDests
        implements Equals, HashCode, ToString
    {

        @XmlElement(required = true)
        protected List<FixedDest> fixedDest;

        /**
         * Gets the value of the fixedDest property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the fixedDest property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getFixedDest().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link FixedDest }
         * 
         * 
         */
        public List<FixedDest> getFixedDest() {
            if (fixedDest == null) {
                fixedDest = new ArrayList<FixedDest>();
            }
            return this.fixedDest;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<FixedDest> theFixedDest;
                theFixedDest = (((this.fixedDest!= null)&&(!this.fixedDest.isEmpty()))?this.getFixedDest():null);
                strategy.appendField(locator, this, "fixedDest", buffer, theFixedDest);
            }
            return buffer;
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof MatchType.FixedDests)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final MatchType.FixedDests that = ((MatchType.FixedDests) object);
            {
                List<FixedDest> lhsFixedDest;
                lhsFixedDest = (((this.fixedDest!= null)&&(!this.fixedDest.isEmpty()))?this.getFixedDest():null);
                List<FixedDest> rhsFixedDest;
                rhsFixedDest = (((that.fixedDest!= null)&&(!that.fixedDest.isEmpty()))?that.getFixedDest():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "fixedDest", lhsFixedDest), LocatorUtils.property(thatLocator, "fixedDest", rhsFixedDest), lhsFixedDest, rhsFixedDest)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
            return equals(null, null, object, strategy);
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<FixedDest> theFixedDest;
                theFixedDest = (((this.fixedDest!= null)&&(!this.fixedDest.isEmpty()))?this.getFixedDest():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fixedDest", theFixedDest), currentHashCode, theFixedDest);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

    }

}
