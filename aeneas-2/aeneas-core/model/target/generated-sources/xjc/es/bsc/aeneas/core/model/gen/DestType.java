//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.5-b10 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.01.29 at 04:50:08 PM CET 
//


package es.bsc.aeneas.core.model.gen;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for DestType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DestType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="transform" type="{http://aeneas.bsc.es/MatchingModel}TransformType" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;attribute name="attr" type="{http://www.w3.org/2001/XMLSchema}string" default="" />
 *       &lt;attribute name="where" use="required" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="from" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *       &lt;attribute name="to" type="{http://www.w3.org/2001/XMLSchema}boolean" default="false" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DestType", propOrder = {
    "transform"
})
public abstract class DestType
    implements Equals, HashCode, ToString
{

    protected List<TransformType> transform;
    @XmlAttribute(name = "attr")
    protected String attr;
    @XmlAttribute(name = "where", required = true)
    protected String where;
    @XmlAttribute(name = "from")
    protected Boolean from;
    @XmlAttribute(name = "to")
    protected Boolean to;

    /**
     * Gets the value of the transform property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the transform property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTransform().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TransformType }
     * 
     * 
     */
    public List<TransformType> getTransform() {
        if (transform == null) {
            transform = new ArrayList<TransformType>();
        }
        return this.transform;
    }

    /**
     * Gets the value of the attr property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAttr() {
        if (attr == null) {
            return "";
        } else {
            return attr;
        }
    }

    /**
     * Sets the value of the attr property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAttr(String value) {
        this.attr = value;
    }

    /**
     * Gets the value of the where property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getWhere() {
        return where;
    }

    /**
     * Sets the value of the where property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setWhere(String value) {
        this.where = value;
    }

    /**
     * Gets the value of the from property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isFrom() {
        if (from == null) {
            return false;
        } else {
            return from;
        }
    }

    /**
     * Sets the value of the from property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setFrom(Boolean value) {
        this.from = value;
    }

    /**
     * Gets the value of the to property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public boolean isTo() {
        if (to == null) {
            return false;
        } else {
            return to;
        }
    }

    /**
     * Sets the value of the to property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setTo(Boolean value) {
        this.to = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<TransformType> theTransform;
            theTransform = (((this.transform!= null)&&(!this.transform.isEmpty()))?this.getTransform():null);
            strategy.appendField(locator, this, "transform", buffer, theTransform);
        }
        {
            String theAttr;
            theAttr = this.getAttr();
            strategy.appendField(locator, this, "attr", buffer, theAttr);
        }
        {
            String theWhere;
            theWhere = this.getWhere();
            strategy.appendField(locator, this, "where", buffer, theWhere);
        }
        {
            boolean theFrom;
            theFrom = ((this.from!= null)?this.isFrom():false);
            strategy.appendField(locator, this, "from", buffer, theFrom);
        }
        {
            boolean theTo;
            theTo = ((this.to!= null)?this.isTo():false);
            strategy.appendField(locator, this, "to", buffer, theTo);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DestType)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final DestType that = ((DestType) object);
        {
            List<TransformType> lhsTransform;
            lhsTransform = (((this.transform!= null)&&(!this.transform.isEmpty()))?this.getTransform():null);
            List<TransformType> rhsTransform;
            rhsTransform = (((that.transform!= null)&&(!that.transform.isEmpty()))?that.getTransform():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transform", lhsTransform), LocatorUtils.property(thatLocator, "transform", rhsTransform), lhsTransform, rhsTransform)) {
                return false;
            }
        }
        {
            String lhsAttr;
            lhsAttr = this.getAttr();
            String rhsAttr;
            rhsAttr = that.getAttr();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "attr", lhsAttr), LocatorUtils.property(thatLocator, "attr", rhsAttr), lhsAttr, rhsAttr)) {
                return false;
            }
        }
        {
            String lhsWhere;
            lhsWhere = this.getWhere();
            String rhsWhere;
            rhsWhere = that.getWhere();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "where", lhsWhere), LocatorUtils.property(thatLocator, "where", rhsWhere), lhsWhere, rhsWhere)) {
                return false;
            }
        }
        {
            boolean lhsFrom;
            lhsFrom = ((this.from!= null)?this.isFrom():false);
            boolean rhsFrom;
            rhsFrom = ((that.from!= null)?that.isFrom():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "from", lhsFrom), LocatorUtils.property(thatLocator, "from", rhsFrom), lhsFrom, rhsFrom)) {
                return false;
            }
        }
        {
            boolean lhsTo;
            lhsTo = ((this.to!= null)?this.isTo():false);
            boolean rhsTo;
            rhsTo = ((that.to!= null)?that.isTo():false);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "to", lhsTo), LocatorUtils.property(thatLocator, "to", rhsTo), lhsTo, rhsTo)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<TransformType> theTransform;
            theTransform = (((this.transform!= null)&&(!this.transform.isEmpty()))?this.getTransform():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transform", theTransform), currentHashCode, theTransform);
        }
        {
            String theAttr;
            theAttr = this.getAttr();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "attr", theAttr), currentHashCode, theAttr);
        }
        {
            String theWhere;
            theWhere = this.getWhere();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "where", theWhere), currentHashCode, theWhere);
        }
        {
            boolean theFrom;
            theFrom = ((this.from!= null)?this.isFrom():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "from", theFrom), currentHashCode, theFrom);
        }
        {
            boolean theTo;
            theTo = ((this.to!= null)?this.isTo():false);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "to", theTo), currentHashCode, theTo);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

}
